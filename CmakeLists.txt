set(CMAKE_MINIMUM_REQUIRED_VERSION 3.5)
cmake_minimum_required(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})

#-----------------------------------------------------------------------------
# See http://www.cmake.org/cmake/help/v3.5/manual/cmake-policies.7.html for details
#-----------------------------------------------------------------------------

# -----------include part ------------
include(ExternalProject)	# Owned by CMake
include(CMake/FunctionInstallExternalCMakeProject.cmake)
include(CMake/MacroEmptyExternalProject.cmake)
include(CMake/FunctionCheckCompilerFlags.cmake)
include(CMake/FunctionGetMSVCVersion.cmake)
include(CMake/FunctionUseModules.cmake)


set(project_policies )
foreach(policy ${project_policies})
  if(POLICY ${policy})
    cmake_policy(SET ${policy} NEW)
  endif()
endforeach()

#---------------------------------------------
# Build the Project/Solution
#---------------------------------------------

project(NameDemo) # Modify this 'NameDemo' for your custom project name 

set(MYPROJ_SOURCE_DIR ${PROJECT_SOURCE_DIR})
set(MYPROJ_BINARY_DIR ${PROJECT_BINARY_DIR})
set(BUILD_SHARED_LIBS ON)

if(NOT MYPROJ_THIRDPARTY_DOWNLOAD_PREFIX_URL)
  #set( MITK_THIRDPARTY_DOWNLOAD_PREFIX_URL http://mitk.org/download/thirdparty )
  set( MYPROJ_THIRDPARTY_DOWNLOAD_PREFIX_URL ftp://192.168.0.144/MITKABOUT/thirdparty )
endif()

macro(downloadFile url dest)
  file(DOWNLOAD ${url} ${dest} STATUS status)
  list(GET status 0 error_code)
  list(GET status 1 error_msg)
  if(error_code)
    message(FATAL_ERROR "error: Failed to download ${url} - ${error_msg}")
  else()
	#message("Having downloaded successfully !")
  endif()
endmacro()

set(ep_prefix "${CMAKE_BINARY_DIR}/ep")
set_property(DIRECTORY PROPERTY EP_PREFIX ${ep_prefix})
# Compute -G arg for configuring external projects with the same CMake generator:
if(CMAKE_EXTRA_GENERATOR)
  set(gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
else()
  set(gen "${CMAKE_GENERATOR}")
endif()

set(ep_common_args
  -DBUILD_TESTING:BOOL=${ep_build_testing}
  -DCMAKE_INSTALL_PREFIX:PATH=${ep_install_dir}
  -DBUILD_SHARED_LIBS:BOOL=${ep_build_shared_libs}
  -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}
  -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}
  -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  # debug flags
  -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
  -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
  # release flags
  -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
  -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
  # relwithdebinfo
  -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
  -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_C_FLAGS_RELWITHDEBINFO}
  # link flags
  -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS}
  -DCMAKE_SHARED_LINKER_FLAGS:STRING=${CMAKE_SHARED_LINKER_FLAGS}
  -DCMAKE_MODULE_LINKER_FLAGS:STRING=${CMAKE_MODULE_LINKER_FLAGS}
)
set(ep_common_cache_args
)

set(ep_common_cache_default_args
  "-DCMAKE_PREFIX_PATH:PATH=${CMAKE_PREFIX_PATH}"
  "-DCMAKE_INCLUDE_PATH:PATH=${CMAKE_INCLUDE_PATH}"
  "-DCMAKE_LIBRARY_PATH:PATH=${CMAKE_LIBRARY_PATH}"
)

# ------------- patch ------------------
# We need a proper patch program. On Linux and MacOS, we assume
# that "patch" is available. On Windows, we download patch.exe
# if not patch program is found.
find_program(PATCH_COMMAND patch)
if((NOT PATCH_COMMAND OR NOT EXISTS ${PATCH_COMMAND}) AND WIN32)
  downloadFile(${MYPROJ_THIRDPARTY_DOWNLOAD_PREFIX_URL}/patch.exe
               ${CMAKE_CURRENT_BINARY_DIR}/patch.exe)
  find_program(PATCH_COMMAND patch ${CMAKE_CURRENT_BINARY_DIR})
endif()
if(NOT PATCH_COMMAND)
  message(FATAL_ERROR "No patch program found.")
endif()

# ----------- QT5 --------------
option(PROJ_USE_QT5 "Build the project with qt5." ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON) 

if(PROJ_USE_QT5)
  find_package(Qt5Widgets)
  find_package(Qt5Core)
  find_package(Qt5Gui)
  
  set(CMAKE_AUTOMOC ON)
  FILE(GLOB UI_FILES "./*.ui")
  FILE(GLOB RCC_FILES "./*.qrc")
  qt5_wrap_ui(WRAP_FILES ${UI_FILES})
endif()

FILE(GLOB SRC_FILES "./*.c**") 
FILE(GLOB HEAD_FILES "./*.h**") 


# *************** OpenCV ************
option(PROJ_USE_OpenCV "Build the project with OpenCV." ON)
if(PROJ_USE_OpenCV)
  include(CMake/OpenCV.cmake)
endif()

# Another test about OpenCV
  #set(OpenCV_DIR D:/Program Files/opencv-3.2.0/opencv/build) #D:\Program Files\opencv-3.2.0\opencv\build
  #find_package(OpenCV REQUIRED)
  #include_directories(${OpenCV_INCLUDE_DIR})
  #link_directories(${OpenCV_LIBRARY_DIR})


# *********** GDCM *************
include(CMake/GDCM.cmake)

# *********** ITK **************
include(CMake/ITK.cmake)

# ----------- VTK --------------
include(CMake/VTK.cmake)


# ---- C/CXX Flags&&OpenMP ------

set(PROJ_C_FLAGS "${COVERAGE_C_FLAGS}")
set(PROJ_C_FLAGS_DEBUG )
set(PROJ_C_FLAGS_RELEASE )
set(PROJ_CXX_FLAGS "${COVERAGE_CXX_FLAGS} ${PROJ_CXX11_FLAG}")
set(PROJ_CXX_FLAGS_DEBUG )
set(PROJ_CXX_FLAGS_RELEASE )

set(PROJ_EXE_LINKER_FLAGS )
set(PROJ_SHARED_LINKER_FLAGS )

find_package(OpenMP)

if (OPENMP_FOUND)
  set(PROJ_C_FLAGS "${PROJ_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(PROJ_CXX_FLAGS "${PROJ_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

if(WIN32)
  set(PROJ_CXX_FLAGS "${PROJ_CXX_FLAGS} -D_WIN32_WINNT=0x0501 -DPOCO_NO_UNWINDOWS -DWIN32_LEAN_AND_MEAN -DNOMINMAX")
  FunctionCheckCompilerFlags("/wd4005" PROJ_CXX_FLAGS) # warning C4005: macro redefinition
  FunctionCheckCompilerFlags("/wd4231" PROJ_CXX_FLAGS) # warning C4231: nonstandard extension used : 'extern' before template explicit instantiation
  # the following line should be removed after fixing bug 17637
  FunctionCheckCompilerFlags("/wd4316" PROJ_CXX_FLAGS) # warning C4316: object alignment on heap
  FunctionCheckCompilerFlags("/wd4180" PROJ_CXX_FLAGS) # warning C4180: qualifier applied to function type has no meaning
endif()

if(NOT MSVC_VERSION)
  foreach(_flag
    -Wall
    -Wextra
    -Wpointer-arith
    -Winvalid-pch
    -Wcast-align
    -Wwrite-strings
    -Wno-error=gnu
    -Wno-error=unknown-pragmas
    # The strict-overflow warning is generated by ITK template code
    -Wno-error=strict-overflow
    -Woverloaded-virtual
    -Wstrict-null-sentinel
    #-Wold-style-cast
    #-Wsign-promo

    -Wno-array-bounds

    -fdiagnostics-show-option
    )
    FunctionCheckCAndCXXCompilerFlags(${_flag} PROJ_C_FLAGS PROJ_CXX_FLAGS)
  endforeach()
endif()

if(CMAKE_COMPILER_IS_GNUCXX AND NOT APPLE)
  FunctionCheckCompilerFlags("-Wl,--no-undefined" PROJ_SHARED_LINKER_FLAGS)
  FunctionCheckCompilerFlags("-Wl,--as-needed" PROJ_SHARED_LINKER_FLAGS)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
  FunctionCheckCAndCXXCompilerFlags("-fstack-protector-all" PROJ_C_FLAGS PROJ_CXX_FLAGS)

  if(MINGW)
    # suppress warnings about auto imported symbols
    set(PROJ_SHARED_LINKER_FLAGS "-Wl,--enable-auto-import ${PROJ_SHARED_LINKER_FLAGS}")
  endif()

  set(PROJ_CXX_FLAGS_RELEASE "-U_FORTIFY_SOURCES -D_FORTIFY_SOURCE=2 ${PROJ_CXX_FLAGS_RELEASE}")
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  FunctionCheckCompilerFlags("-stdlib=libc++" PROJ_CXX_FLAGS) # T20092
endif()

set(PROJ_MODULE_LINKER_FLAGS ${PROJ_SHARED_LINKER_FLAGS})
set(PROJ_EXE_LINKER_FLAGS ${PROJ_SHARED_LINKER_FLAGS})

# ----------- CUDA --------------
option(PROJ_USE_CUDA "Build the project with CUDA." ON)
if (PROJ_USE_CUDA)
	#project(test_cuda_project)
	# packages
	find_package(CUDA)
	# nvcc flags
	set(CUDA_NVCC_FLAGS -gencode arch=compute_20,code=sm_20;-G;-g)
	#set(CUDA_NVCC_FLAGS -gencode arch=compute_52,code=sm_52;-G;-g)

	#file(GLOB_RECURSE CUDA_CURRENT_HEADERS  *.cuh)
	file(GLOB CUDA_CURRENT_SOURCES  *.cu)
	#source_group("Include" FILES ${CUDA_CURRENT_HEADERS}) 
	source_group("Source" FILES ${CUDA_CURRENT_SOURCES}) 

	#cuda_add_executable(test_cuda_project  ${CUDA_CURRENT_SOURCES}) #${CUDA_CURRENT_HEADERS}
endif()

# ----------- DL models ------------


# ----------- Boost --------------
include(CMake/Boost.cmake)

# ------------ MPI ---------------


# ----------- MKL ----------------


# ----------- OTHERS --------------


#-----------------------------------------------------------------------------
# PROJ Packages
#-----------------------------------------------------------------------------

set(PROJ_MODULES_PACKAGE_DEPENDS_DIR ${PROJ_SOURCE_DIR}/CMake/PackageDepends)
set(MODULES_PACKAGE_DEPENDS_DIRS ${PROJ_MODULES_PACKAGE_DEPENDS_DIR})

if(NOT PROJ_USE_SYSTEM_Boost)
  set(Boost_NO_SYSTEM_PATHS 1)
endif()

set(Boost_USE_MULTITHREADED 1)
set(Boost_USE_STATIC_LIBS 0)
set(Boost_USE_STATIC_RUNTIME 0)
set(Boost_ADDITIONAL_VERSIONS "1.60" "1.60.0")

# We need this later for a DCMTK workaround
#set(_dcmtk_dir_orig ${DCMTK_DIR})

# This property is populated at the top half of this file
get_property(PROJ_EXTERNAL_PROJECTS GLOBAL PROPERTY PROJ_EXTERNAL_PROJECTS)
foreach(ep ${PROJ_EXTERNAL_PROJECTS})
  get_property(_package GLOBAL PROPERTY PROJ_${ep}_PACKAGE)
  get_property(_components GLOBAL PROPERTY PROJ_${ep}_COMPONENTS)
  if(PROJ_USE_${ep} AND _package)
    if(_components)
      find_package(${_package} COMPONENTS ${_components} REQUIRED CONFIG)
    else()
      # Prefer config mode first because it finds external
      # <proj>Config.cmake files pointed at by <proj>_DIR variables.
      # Otherwise, existing Find<proj>.cmake files could fail.
      # (e.g. in the case of GLEW and the FindGLEW.cmake file shipped
      # with CMake).
      find_package(${_package} QUIET CONFIG)
      string(TOUPPER "${_package}" _package_uc)
      if(NOT (${_package}_FOUND OR ${_package_uc}_FOUND))
        find_package(${_package} REQUIRED)
      endif()
    endif()
  endif()
endforeach()

# Ensure that the PROJ CMake module path comes first
set(CMAKE_MODULE_PATH
  ${PROJ_CMAKE_DIR}
  ${CMAKE_MODULE_PATH}
  )

# Same as SOFA above
link_directories(${Boost_LIBRARY_DIRS})

if(PROJ_USE_OpenCL)
  find_package(OpenCL REQUIRED)
endif()

# Qt support
if(PROJ_USE_QT5)
  find_package(Qt5Core ${PROJ_QT5_MINIMUM_VERSION} REQUIRED) # at least Core required
  get_target_property(_qmake_exec Qt5::qmake LOCATION)
  execute_process(COMMAND ${_qmake_exec} -query QT_INSTALL_BINS
    RESULT_VARIABLE _result
     OUTPUT_VARIABLE QT_BINARY_DIR
    ERROR_VARIABLE _error
  )
  string(STRIP "${QT_BINARY_DIR}" QT_BINARY_DIR)
  if(_result OR NOT EXISTS "${QT_BINARY_DIR}")
    message(FATAL_ERROR "Could not determine Qt binary directory: ${_result} ${QT_BINARY_DIR} ${_error}")
  endif()

  find_program(QT_HELPGENERATOR_EXECUTABLE
    NAMES qhelpgenerator qhelpgenerator-qt5 qhelpgenerator5
    PATHS ${QT_BINARY_DIR}
    NO_DEFAULT_PATH
  )

  find_program(QT_COLLECTIONGENERATOR_EXECUTABLE
    NAMES qcollectiongenerator qcollectiongenerator-qt5 qcollectiongenerator5
    PATHS ${QT_BINARY_DIR}
    NO_DEFAULT_PATH
  )

  find_program(QT_ASSISTANT_EXECUTABLE
    NAMES assistant assistant-qt5 assistant5
    PATHS ${QT_BINARY_DIR}
    NO_DEFAULT_PATH
  )

  find_program(QT_XMLPATTERNS_EXECUTABLE
    NAMES xmlpatterns
    PATHS ${QT_BINARY_DIR}
    NO_DEFAULT_PATH
  )

  mark_as_advanced(QT_HELPGENERATOR_EXECUTABLE
                   QT_COLLECTIONGENERATOR_EXECUTABLE
                   QT_ASSISTANT_EXECUTABLE
                   QT_XMLPATTERNS_EXECUTABLE
                  )

endif()


# ----------- execution -------------
include(CheckFunctionExists)
check_function_exists(printf HAVE_PRINTF)

add_executable(${PROJECT_NAME} ${SRC_FILES} ${HEAD_FILES} ${RCC_FILES} ${WRAP_FILES} ${CUDA_CURRENT_SOURCES})

target_link_libraries(${PROJECT_NAME} Qt5::Widgets Qt5::Core Qt5::Gui ${OpenCV_LIBRARIES})

#-----------------------------------------------------------------------------
# Check miminum compiler versions
#-----------------------------------------------------------------------------

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # require at least gcc 4.9 as provided by ppa:ubuntu-toolchain-r/test for Ubuntu 12.04
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
    message(FATAL_ERROR "GCC version must be at least 4.9
If you are using Ubuntu 12.04, you can easily install gcc and g++ 4.9 (or any later version available) in addition to your version ${CMAKE_CXX_COMPILER_VERSION}:
  sudo add-apt-repository ppa:ubuntu-toolchain-r/test
  sudo apt-get update
  sudo apt-get install gcc-4.9 g++-4.9
Make sure to explicitly specify these compilers when configuring MYPROJ:
  CMAKE_C_COMPILER:FILEPATH=/usr/bin/gcc-4.9
  CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-4.9
For more information on the proposed PPA see the Toolchain Updates section of https://wiki.ubuntu.com/ToolChain.")
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  # require at least clang 3.4 as provided by Ubuntu 12.04
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.4)
    message(FATAL_ERROR "Clang version must be at least 3.4")
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
  # require at least clang 5.0
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
    message(FATAL_ERROR "Apple Clang version must be at least 5.0")
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  # require at least Visual Studio 2013
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.0.40629.0)
    message(FATAL_ERROR "Microsoft Visual Studio 2013 Update 5 or newer required (MSVC 18.0.40629.0)")
  endif()
else()
  message(WARNING "You are using an unsupported compiler! Compilation has only been tested with Clang (Linux or Apple), GCC and MSVC.")
endif()

#-----------------------------------------------------------------------------
# Warn if source or build path is too long, just for better optimizing your naming conventions
#-----------------------------------------------------------------------------

if(WIN32)
  set(_src_dir_length_max 50)  # short path length For ITK, etc.
  set(_bin_dir_length_max 50)

  string(LENGTH "${MYPROJ_SOURCE_DIR}" _src_n)
  string(LENGTH "${MYPROJ_BINARY_DIR}" _bin_n)

  # The warnings should be converted to errors
  if(_src_n GREATER _src_dir_length_max)
    message(WARNING "The source code directory path length is too long (${_src_n} > ${_src_dir_length_max})."
                    "Please move the current source code directory to a directory with a shorter path." )
  endif()
  if(_bin_n GREATER _bin_dir_length_max)
    message(WARNING "The build directory path length is too long (${_bin_n} > ${_bin_dir_length_max})."
                    "Please move the current build directory to a directory with a shorter path." )
  endif()
endif()